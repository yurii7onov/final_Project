/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

vertices
(
    //Air Left
    (-500 0 0)
    (-500 0 -1)
    (-500 50 -1)
    (-500 50 0)

    //Hole 1
    (-417.67 0 0)
    (-417.67 0 -1)
    (-417.67 50 -1)
    (-417.67 50 0)

    (-415.67 0 0)
    (-415.67 0 -1)
    (-415.67 50 -1)
    (-415.67 50 0)

    //Hole 2
    (-334.33 0 0)
    (-334.33 0 -1)
    (-334.33 50 -1)
    (-334.33 50 0)

    (-332.33 0 0)
    (-332.33 0 -1)
    (-332.33 50 -1)
    (-332.33 50 0)

    //Hole 3
    (-251 0 0)
    (-251 0 -1)
    (-251 50 -1)
    (-251 50 0)

    (-249 0 0)
    (-249 0 -1)
    (-249 50 -1)
    (-249 50 0)

    //Hole 4
    (-167.67 0 0)
    (-167.67 0 -1)
    (-167.67 50 -1)
    (-167.67 50 0)

    (-165.67 0 0)
    (-165.67 0 -1)
    (-165.67 50 -1)
    (-165.67 50 0)

    //Hole 5
    (-84.33 0 0)
    (-84.33 0 -1)
    (-84.33 50 -1)
    (-84.33 50 0)

    (-82.33 0 0)
    (-82.33 0 -1)
    (-82.33 50 -1)
    (-82.33 50 0)


    //Hole 6
    (-1 0 0)
    (-1 0 -1)
    (-1 50 -1)
    (-1 50 0)

    (1 0 0)
    (1 0 -1)
    (1 50 -1)
    (1 50 0)

    //Hole 7
    (82.33 0 0)
    (82.33 0 -1)
    (82.33 50 -1)
    (82.33 50 0)

    (84.33 0 0)
    (84.33 0 -1)
    (84.33 50 -1)
    (84.33 50 0)

    //Hole 8
    (165.67 0 0)
    (165.67 0 -1)
    (165.67 50 -1)
    (165.67 50 0)

    (167.67 0 0)
    (167.67 0 -1)
    (167.67 50 -1)
    (167.67 50 0)

    //Hole 9
    (249 0 0)
    (249 0 -1)
    (249 50 -1)
    (249 50 0)

    (251 0 0)
    (251 0 -1)
    (251 50 -1)
    (251 50 0)

    //Hole 10
    (332.33 0 0)
    (332.33 0 -1)
    (332.33 50 -1)
    (332.33 50 0)

    (334.33 0 0)
    (334.33 0 -1)
    (334.33 50 -1)
    (334.33 50 0)

    //Hole 11
    (415.67 0 0)
    (415.67 0 -1)
    (415.67 50 -1)
    (415.67 50 0)

    (417.67 0 0)
    (417.67 0 -1)
    (417.67 50 -1)
    (417.67 50 0)

    //Air Right
    (500 0 0)
    (500 0 -1)
    (500 50 -1)
    (500 50 0)

);

blocks          
(
    hex (0 1 2 3 4 5 6 7)         (1 50 50) simpleGrading (1 0.8 0.1) //AirLeft
    hex (4 5 6 7 8 9 10 11)       (1 50 2)  simpleGrading (1 0.8 1)   //Hole1

    hex (8 9 10 11 12 13 14 15)   (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))  //Air 1-2
    hex (12 13 14 15 16 17 18 19) (1 50 2)  simpleGrading (1 0.8 1)   //Hole2

    hex (16 17 18 19 20 21 22 23) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 2-3
    hex (20 21 22 23 24 25 26 27) (1 50 2)  simpleGrading (1 0.8 1)   //Hole3

    hex (24 25 26 27 28 29 30 31) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 3-4
    hex (28 29 30 31 32 33 34 35) (1 50 2)  simpleGrading (1 0.8 1)   //Hole4

    hex (32 33 34 35 36 37 38 39) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 4-5
    hex (36 37 38 39 40 41 42 43) (1 50 2)  simpleGrading (1 0.8 1)   //Hole5

    hex (40 41 42 43 44 45 46 47) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 5-6
    hex (44 45 46 47 48 49 50 51) (1 50 2)  simpleGrading (1 0.8 1)   //Hole6

    hex (48 49 50 51 52 53 54 55) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 6-7
    hex (52 53 54 55 56 57 58 59) (1 50 2)  simpleGrading (1 0.8 1)   //Hole7

    hex (56 57 58 59 60 61 62 63) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 7-8
    hex (60 61 62 63 64 65 66 67) (1 50 2)  simpleGrading (1 0.8 1)   //Hole8

    hex (64 65 66 67 68 69 70 71) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 8-9
    hex (68 69 70 71 72 73 74 75) (1 50 2)  simpleGrading (1 0.8 1)   //Hole9

    hex (72 73 74 75 76 77 78 79) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 9-10
    hex (76 77 78 79 80 81 82 83) (1 50 2)  simpleGrading (1 0.8 1)   //Hole10

    hex (80 81 82 83 84 85 86 87) (1 50 50) simpleGrading (1 0.8 ((0.5 0.5 10)(0.5 0.5 0.1)))   //Air 10-11
    hex (84 85 86 87 88 89 90 91) (1 50 2)  simpleGrading (1 0.8 1)   //Hole11

    hex (88 89 90 91 92 93 94 95) (1 50 50) simpleGrading (1 0.8 10)  //AirRight
);

edges           
(
);

boundary         
(

    fixedWalls
    {
        type    wall;
        faces
    (
        (0 1 5 4)//AirLeft
        (8 9 13 12) //Air 1-2
        (16 17 21 20) //Air 2-3
        (24 25 29 28) //Air 3-4
        (32 33 37 36) //Air 4-5
        (40 41 45 44) //Air 5-6
        (48 49 53 52) //Air 6-7
        (56 57 61 60) //Air 7-8
        (64 65 69 68) //Air 8-9
        (72 73 77 76) //Air 9-10
        (80 81 85 84) //Air 10-11
        (88 89 93 92) //Air Right
    );
    }

        frontAndBack
    {
        type    empty;
        faces
    (
        (0 4 7 3) //Air Left
        (1 2 6 5)
        (4 8 11 7)//Hole1
        (5 6 10 9)
        (8 12 15 11)//Air 
        (9 10 14 13)
        (12 16 19 15)//Hole 2
        (13 14 18 17)
        (16 20 23 19)//Air 
        (17 18 22 21)
        (20 24 27 23)//Hole 3
        (21 22 26 25)
        (24 28 31 27)//Air 
        (25 26 30 29)
        (28 32 35 31)//Hole 4
        (29 30 34 33)
        (32 36 39 35)//Air 
        (33 34 38 37)
        (36 40 43 39)//Hole 5
        (37 38 42 41)
        (40 44 47 43)//Air 
        (41 42 46 45)
        (44 48 51 47)//Hole 6
        (45 46 50 49)
        (48 52 55 51)//Air 
        (49 50 54 53)
        (52 56 59 55)//Hole 7
        (53 54 58 57)
        (56 60 63 59)//Air 
        (57 58 62 61)
        (60 64 67 63)//Hole 8
        (61 62 66 65)
        (64 68 71 67)//Air 
        (65 66 70 69)
        (68 72 75 71)//Hole 9
        (69 70 74 73)
        (72 76 79 75)//Air 
        (73 74 78 77)
        (76 80 83 79)//Hole 10
        (77 78 82 81)
        (80 84 87 83)//Air 
        (81 82 86 85)
        (84 88 91 87)//Hole 11
        (85 86 90 89)
        (88 92 95 91)//Air 
        (89 90 94 93)
    );
    }

    inlet_1
    {
        type patch;
        faces
    (
        (4 5 9 8)
    );
    }

    inlet_2
    {
        type patch;
        faces
    (
        (12 13 17 16)
    );
    }

    inlet_3
    {
        type patch;
        faces
    (
        (20 21 25 24)
    );
    }

    inlet_4
    {
        type patch;
        faces
    (
        (28 29 33 32)
    );
    }

    inlet_5
    {
        type patch;
        faces
    (
        (36 37 41 40)
    );
    }
    inlet_6
    {
        type patch;
        faces
    (
        (44 45 49 48)
    );
    }

    inlet_7
    {
        type patch;
        faces
    (
        (52 53 57 56)
    );
    }

    inlet_8
    {
        type patch;
        faces
    (
        (60 61 65 64)
    );
    }

    inlet_9
    {
        type patch;
        faces
    (
        (68 69 73 72)
    );
    }

    inlet_10
    {
        type patch;
        faces
    (
        (76 77 81 80)
    );
    }

    inlet_11
    {
        type patch;
        faces
    (
        (84 85 89 88)
    );
    }

    outlet
    {
        type patch;
        faces
    (
        (0 3 2 1) //AirSideLeft
        (2 3 7 6) //AirLeft
        (6 7 11 10) //Hole1
        (10 11 15 14) //Air
        (14 15 18 19) //Hole2
        (18 19 22 23) //Air
        (22 23 26 27) //Hole3
        (26 27 30 31) //Air
        (30 31 34 35) //Hole4
        (34 35 38 39) //Air
        (38 39 42 43) //Hole5
        (42 43 46 47) //Air
        (46 47 50 51) //Hole6
        (50 51 54 55) //Air
        (54 55 58 59) //Hole7
        (58 59 62 63) //Air
        (62 63 66 67) //Hole8
        (66 67 70 71) //Air
        (70 71 74 75) //Hole9
        (74 75 78 79) //Air
        (78 79 82 83) //Hole10
        (82 83 86 87) //Air
        (86 87 90 91) //Hole11
        (90 91 95 94) //AirRight
        (92 93 94 95) //AirSideRight
    );
    }
);

mergePatchPairs 
(
);

// ************************************************************************* //
